import React, { useState, useEffect } from 'react';
import Keyboard from './Keyboard';
import PhraseDisplay from './PhraseDisplay';
import './App.css';

function App() {
    const phrases = ["Exploring the unknown #", "Dancing in the moonlight @", "Whispers in the wind *", "Journey beyond the stars &", "Echoes of the past !", "Lost in a daydream +", "Chasing the sunset", "Underneath the vast sky %", "Laughter in the rain ^", "Moments of serenity", "Adventures in the wilderness", "Sailing the seven seas >", "Strolling through the meadows <", "Mysteries of the deep ?", "Beneath the canopy of stars ~", "Wandering through ancient ruins $", "Glimpses of the future", "In the heart of the forest", "Among the rolling hills", "Reflections on the water", "Whirlwind of emotions", "Capturing the fleeting moments", "Through the looking glass", "Riding the waves of change", "Random Phrases Generated by: ChatGPT"];
    const [currentPhraseIndex, setCurrentPhraseIndex] = useState(0);
    const [typedIndex, setTypedIndex] = useState(0);
    const [pressedKeys, setPressedKeys] = useState({});
    const [phrase, setPhrase] = useState(phrases[currentPhraseIndex]);
    const nextChar = phrase && typedIndex < phrase.length ? phrase[typedIndex] : '';
    const requiresShift = nextChar === nextChar.toUpperCase();

    useEffect(() => {
        const handleKeyDown = (event) => {
            const key = event.key;
            console.log(event.key, event.key);

            setPressedKeys(prev => ({ ...prev, [key]: true }));

            let expectedChar = phrase[typedIndex];
            const isUpperCaseOrSpecialChar = expectedChar === expectedChar.toUpperCase();
            const isShiftPressed = event.key === 'Shift' || pressedKeys['Shift'];
            const isSpaceBar = key === ' ';
            const isCorrectKey = 
                (isUpperCaseOrSpecialChar && isShiftPressed && event.key.toUpperCase() === expectedChar) || 
                (!isUpperCaseOrSpecialChar && !isShiftPressed && !isSpaceBar && event.key.toLowerCase() === expectedChar.toLowerCase()) ||
                (isSpaceBar && expectedChar === ' '); 
    
            if (isCorrectKey) {
                setTypedIndex(currentTypedIndex => {
                    const nextIndex = currentTypedIndex + 1;
                    if (nextIndex >= phrase.length) {
                        const nextPhraseIndex = (currentPhraseIndex + 1) % phrases.length;
                        setCurrentPhraseIndex(nextPhraseIndex);
                        setPhrase(phrases[nextPhraseIndex]);
                        return 0;
                    }
                    return nextIndex;
                });
            }
        };
    
        const handleKeyUp = (event) => {
            setPressedKeys(prev => ({ ...prev, [event.key]: false }));
        };
    
        window.addEventListener("keydown", handleKeyDown);
        window.addEventListener("keyup", handleKeyUp);
    
        return () => {
            window.removeEventListener("keydown", handleKeyDown);
            window.removeEventListener("keyup", handleKeyUp);
        };
    }, [phrase, typedIndex, phrases, currentPhraseIndex, pressedKeys]);
    
    return (
        <div className="app">
            <PhraseDisplay phrase={phrase} typedIndex={typedIndex} />
            <Keyboard pressedKeys={pressedKeys} typedIndex={typedIndex} phrase={phrase} nextChar={nextChar} />
        </div>); 
}

export default App;
